@page "/Sellproduct"

@inject IGenericService<Product> ProductService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<style>
    .continer {
        width: 100%;
        position: relative;
        display: flex;
        justify-content: end;
        align-items: center;
    }
</style>

<MudPaper Elevation="4" Class="pa-4">
    <MudTable Items="billItems" Dense="true" Hover="true" Class="mt-4">
        <ToolBarContent>
            <MudTextField T="string" @ref="textField" HelperText="Name or Barcode" Label="Search" @bind-Value="filterName" TextChanged="OnFilterChanged" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Product Name</MudTh>
            <MudTh>Sell Price</MudTh>
            @* <MudTh>Discount</MudTh> *@
            <MudTh>BarCode</MudTh>
            <MudTh>Quantity Nummber</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Total</MudTh>
            <MudTh>Remove</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Product.Name</MudTd>
            <MudTd>@context.Product.SellPrice.ToString("C")</MudTd>
            @* <MudTd>@context.Product.Discount.ToString("C")</MudTd> *@
            <MudTd>@context.Product.BarCode</MudTd>
            <MudTd>@context.Product</MudTd>
            <MudTd>
                <MudNumericField @bind-Value="context.Quantity" Min="1" />
            </MudTd>
            <MudTd>@((context.Product.BuyPrice * context.Quantity).ToString("C"))</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => RemoveFromBill(context))">
                    Remove
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudContainer Class="my-4 continer">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveBill" Class="mt-4">Save Bill</MudButton>
    </MudContainer>
</MudPaper>


<MudDialog @bind-IsVisible="_visible" Class="card-show">
    <TitleContent><h3>product list </h3></TitleContent>
    <DialogContent>
        <MudTable Items="filteredProducts" Hover="true" Dense=true>
            <ToolBarContent>
                <MudTextField T="string" Label="Search" @bind-Value="searchString" TextChanged="FilterProducts" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Select</MudTh>
                <MudTh>Product Name</MudTh>
                <MudTh>Sell Price</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => AddToBill(context))">
                        Add
                    </MudButton>
                </MudTd>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.SellPrice.ToString("C")</MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudTd><MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="Close" Class="mt-4">Close</MudButton></MudTd>
    </DialogActions>
</MudDialog>
@code {
    private string filterName;
    private string searchString;
    private List<BillItem> billItems = new List<BillItem>();
    public IEnumerable<Product> products = new List<Product>();
    public IEnumerable<Product> filteredProducts = new List<Product>();

    private MudTextField<string> textField;
    public void Close() => _visible = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize the products list. In a real application, this might be loaded from a database.

        var request = await ProductService.GetAllAsync();
        if (request.Success) products = request.Data!;
        filteredProducts = products;

        await textField.FocusAsync();

    }

    private void AddToBill(Product product)
    {
        var existingItem = billItems.FirstOrDefault(item => item.Product.Name == product.Name);
        if (existingItem != null) existingItem.Quantity++;
        else billItems.Add(new BillItem { Product = product, Quantity = 1 });

    }

    private void RemoveFromBill(BillItem item) => billItems.Remove(item);


    private void SaveBill()
    {
        if (billItems.Count() != 0)
            Snackbar.Add("save done", Severity.Success);
        else
            Snackbar.Add("add one product at lest", Severity.Warning);
    }

    private void OnFilterChanged(string value)
    {
        filterName = value;
        var matchedProduct = products.Where(p => p.Name.Equals(filterName, StringComparison.OrdinalIgnoreCase) || p.BarCode.ToString().Equals(filterName, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
        if (matchedProduct != null)
        {
            AddToBill(matchedProduct);
            filterName = string.Empty; // Clear the filter input after adding the product to the bill
        }
        // else if (filterName != null && matchedProduct == null && filterName != "") SureDialog();
        else if (!(string.IsNullOrEmpty(filterName)) && matchedProduct == null) SureDialog();
    }
    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(searchString)) filteredProducts = products;
        else
            filteredProducts = products.Where(p => p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || p.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();

    }
    string state = "Message box hasn't been opened yet";

    private async void SureDialog()
    {
        bool? result = await DialogService.ShowMessageBox(
            "info",
            "product Name or Barcode not exist , display products ?",
            yesText: "show", cancelText: "Cancel");

        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!") OpenDialog();
        StateHasChanged();
    }
    public class BillItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
    }

    //dialog show
    private bool _visible;
    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };

    private void OpenDialog() => _visible = true;

    private void Submit() => _visible = false;

}

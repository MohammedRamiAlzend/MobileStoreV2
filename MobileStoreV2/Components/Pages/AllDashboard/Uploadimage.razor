@page "/upload-image"


@inject IDialogService DialogService
@inject IGenericService<ImageModel> imageservice
@inject ISnackbar Snackbar


<InputFile OnChange="HandleFileSelected" accept="image/jpeg,image/png" />

@code {
    private IBrowserFile selectedFile;
    private string uploadedImageName;
    public IEnumerable<ImageModel> images = new List<ImageModel>();
    ImageModel CreateImage = new ImageModel();
    [Parameter] public EventCallback<string> OnButtonClick { get; set; }
    [Parameter] public EventCallback<bool> refreshProduct { get; set; }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {

        selectedFile = e.File;
        var GetiamgeName = images.Where(x => x.ImageName == selectedFile.Name).FirstOrDefault();
        if (GetiamgeName != null)
        {
            Snackbar.Add("image Name Allready Exsits ", Severity.Warning);
            //Start Send imageValue
            await OnButtonClick.InvokeAsync(selectedFile.Name);
            await refreshProduct.InvokeAsync();
            //End Send imageValue
            return;
        }
        var ContentType = selectedFile.ContentType;
        if (ContentType != "image/png".ToString() && ContentType != "image/jpeg".ToString() && ContentType != "image/jpg".ToString())
        {
            Snackbar.Add($"file type (({ContentType})) not accpetd ", Severity.Warning);
            return;
        }

        if (selectedFile != null)
        {
            uploadedImageName = DateTime.Now.Microsecond.ToString() + "_" + selectedFile.Name;

            //  var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
            var filePath = Path.Combine("C:\\Users\\Dell\\Desktop\\MobileStore\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(fileStream);
            }

            var fileBytes = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream().ReadAsync(fileBytes);
            // Save the image using the service
            CreateImage.ImageName = uploadedImageName;
            CreateImage.ImagePath = $"uploads/{Path.GetFileName(uploadedImageName)}";
            CreateImage.DeletedAt = DateTime.Now;
            CreateImage.IsDeleted = false;
            CreateImage.DeletedAt = null;
            var image = CreateImage;
            var request = await imageservice.CreateAsync(image);
            var requestRefresh = await imageservice.GetAllAsync();
            if (request.Success)
            {
                images.Append(image);
                images = requestRefresh.Data!;
                Snackbar.Add(request.Message, Severity.Success);
                CreateImage = new ImageModel();
                //Start Send imageValue 
                await OnButtonClick.InvokeAsync(uploadedImageName);
                await refreshProduct.InvokeAsync();
           
                //End Send imageValue 
                StateHasChanged();
            }
            else Snackbar.Add(request.Message, Severity.Error);
        }
    }



}

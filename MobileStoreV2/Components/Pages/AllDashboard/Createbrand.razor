@page "/Createbrand"

@inject IDialogService DialogService
@inject IGenericService<Brand> brandservice
@inject ISnackbar Snackbar


<EditForm Model="@CreateBrand" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                        <MudTextField T="string" Label="Brand Name " @bind-Value="CreateBrand.Name" For="@(() => CreateBrand.Name)" Required="true" RequiredError="User name is required!" />
                </MudCardContent> 
                <MudCardActions Class="d-xl-inline-flex" Style="display:flex;justify-content:end">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

    </MudGrid>
</EditForm>

<MudTable Items="@brands" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
        <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => SureDialog(context.Id))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" /></MudTd>
    </RowTemplate>
</MudTable>


@code {
    Brand CreateBrand = new Brand();

    private bool _readOnly = true;
    public IEnumerable<Brand> brands = new List<Brand>();
    private bool _hidePosition;
    private bool _loading;
    [Parameter] public EventCallback<bool> refreshProduct { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var requestbrand = await brandservice.GetAllAsync();
        if (requestbrand.Success)brands = requestbrand.Data!;
    }
    private async void OnValidSubmit(EditContext context)
    {
        if (CreateBrand.Name == null)
        {
            Snackbar.Add("Name failed is required", Severity.Error);

            return;
        }
        var brand = CreateBrand;
        var request = await brandservice.CreateAsync(brand);
        var requestRefresh = await brandservice.GetAllAsync();

        if (request.Success)
        {

            brands.Append(brand);
            brands = requestRefresh.Data!;
            Snackbar.Add("Add Brand Done Successfully", Severity.Success);
            await refreshProduct.InvokeAsync(); //refresh Dashboard table
            CreateBrand = new Brand();
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(request.Message, Severity.Error);

        }


    }
    private async Task deleteData(int id)
    {
    
        var product = CreateBrand;

        var request = await brandservice.DeleteAsync(id);
        if (request.Success)
        {

            StateHasChanged();
            Snackbar.Add("Remove Done", Severity.Success);

        }
        else
        {
            Snackbar.Add(request.Message, Severity.Error);

        }

        var requestRefresh = await brandservice.GetAllAsync();
        if (request.Success)
        {
            brands = requestRefresh.Data!;
        }

        StateHasChanged();

    }
    //start Delete Dialog

    string state = "Message box hasn't been opened yet";

    private async void SureDialog(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are You Sure You Want To Delete This Brand !",
            yesText: "Delete!", cancelText: "Cancel");

        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!") await deleteData(id);
        StateHasChanged();
    }


    //End Delete Dialog
}

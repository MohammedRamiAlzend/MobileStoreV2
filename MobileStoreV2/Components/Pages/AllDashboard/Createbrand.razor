@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using DataCore.Services.Interfaces
@using DataCore.Models
@inject IBrandService brandservice
@inject ISnackbar Snackbar


<EditForm Model="@CreateBrand" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name" HelperText="Max. 8 characters"
                                  @bind-Value="CreateBrand.Name" For="@(() => CreateBrand.Name)" InputType="InputType.Text" />
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>



<MudTable Items="@brands" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
    </RowTemplate>
</MudTable>


@code {
    Brand CreateBrand = new Brand();
    public IEnumerable<Brand> brands = new List<Brand>();
    private bool _hidePosition;
    private bool _loading;
    protected override async Task OnInitializedAsync()
    {
        var requestbrand = await brandservice.GetAllBrandsAsync();
        if (requestbrand.Success)brands = requestbrand.Data!;
    }
    private async void OnValidSubmit(EditContext context)
    {
        var brand = CreateBrand;
        var request = await brandservice.CreateBrandAsync(brand);
        var requestRefresh = await brandservice.GetAllBrandsAsync();

        if (request.Success)
        {

            brands.Append(brand);
            brands = requestRefresh.Data!;
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(request.Message, Severity.Error);

        }
    }
}

@page "/upload"

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@inject IImageService imageservice
@using DataCore.Data
@using DataCore.Models.DataCore.Models
@using DataCore.Services.Interfaces
@using DataCore.Models
@using Microsoft.AspNetCore.Components
@using System.Globalization;
@inject ISnackbar Snackbar
@using Microsoft.EntityFrameworkCore;

<h3>Chouse Your Image To Upload</h3>

<InputFile OnChange="HandleFileSelected" />

@* @if (uploadedImageName != null)
{
    <p>Uploaded File: @uploadedImageName</p>
} *@



<MudPaper Elevation="1" Class="pa-4">
    @foreach (var filter in images)
    {

        <MudPaper Height="400px" Width="100%">
            <MudContainer MaxWidth="MaxWidth.Small">
                @* <MudImage Src="@filter.ImagePath" Width="300" Height="300" /> *@
                <img src="@($"{filter.ImagePath}?{Guid.NewGuid()}")" height="300" width="300" alt="Uploaded Image" />

            </MudContainer>
        </MudPaper>
        
    }
</MudPaper>

<MudTable Items="@images" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>id</MudTh>
        <MudTh>ImageName</MudTh>
        <MudTh>ImagePath</MudTh>
        <MudTh>UploadData</MudTh>
        <MudTh>Action</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="ImageName">@context.ImageName</MudTd>
        @* <MudTd DataLabel="Imagepath"><img width="100" height="100" src="data:image;base64,@Convert.ToBase64String(context.ImageData)" alt="@context.ImageData" /></MudTd> *@
        <MudTd DataLabel="Imagepath">@context.ImagePath</MudTd>
        <MudTd DataLabel="UploadDate">@context.UploadDate</MudTd>
        <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => SureDialog(context.Id))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" /></MudTd>

    </RowTemplate>
</MudTable>

@code {
    private IBrowserFile selectedFile;
    private string uploadedImageName;
    public IEnumerable<ImageModel> images = new List<ImageModel>();
    ImageModel CreateImage = new ImageModel();

    private bool _loading;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {

        selectedFile = e.File;
        var GetiamgeName = images.Where(x => x.ImageName == selectedFile.Name).FirstOrDefault();
        if (GetiamgeName != null)
        {
            Snackbar.Add("image Name Allready Exsits ", Severity.Warning);
            return;
        }

        if (selectedFile != null)
        {
            uploadedImageName = selectedFile.Name;

            var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
            //var filePath = Path.Combine(Env.webrootpath, "uploads", uploadedFileName);

            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(fileStream);
             

            }
            StateHasChanged();
            var fileBytes = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream().ReadAsync(fileBytes);
            uploadedImageName = selectedFile.Name;


            // Save the image using the service
            CreateImage.ImageName = selectedFile.Name;
            CreateImage.ImagePath = $"/uploads/{Path.GetFileName(selectedFile.Name)}";
            CreateImage.DeletedAt = DateTime.Now;
            CreateImage.IsDeleted = false;
            CreateImage.DeletedAt = null;
            var image = CreateImage;
            var request = await imageservice.CreateImageAsync(image);
            var requestRefresh = await imageservice.GetAllImageAsync();
            if (request.Success)
            {

                images.Append(image);
                images = requestRefresh.Data!;
                Snackbar.Add($"Add Image {uploadedImageName} Done Successfully", Severity.Success);
                Snackbar.Add(request.Message, Severity.Success);
                CreateImage = new ImageModel();
                StateHasChanged();
            }
            else Snackbar.Add(request.Message, Severity.Error);
        }
    }
    private async Task deleteData(int id)
    {
        Snackbar.Add(id.ToString(), Severity.Success);


        var request = await imageservice.DeleteImageAsync(id);

        if (request.Success)
        {

            StateHasChanged();
            Snackbar.Add(request.Message, Severity.Success);

        }
        else
        {
            Snackbar.Add(request.Message, Severity.Error);

        }

        var requestRefresh = await imageservice.GetAllImageAsync();

        if (request.Success)
        {
            images = requestRefresh.Data!;
        }

        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {

        var request = await imageservice.GetAllImageAsync();
        if (request.Success)
        {
            images = request.Data!;
        }

    }
    string state = "Message box hasn't been opened yet";

    private async void SureDialog(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are You Sure You Want To Delete This Prodcut !",
            yesText: "Delete!", cancelText: "Cancel");

        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!") await deleteData(id);
        StateHasChanged();
    }

}

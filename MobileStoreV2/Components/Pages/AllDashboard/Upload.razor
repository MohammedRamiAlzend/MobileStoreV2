@page "/upload"

@inject IDialogService DialogService
@inject IGenericService<ImageModel> imageservice
@inject ISnackbar Snackbar


<InputFile OnChange="HandleFileSelected" accept="image/jpeg,image/png" />

@if (uploadedImageData != null)
{
    <img src="@uploadedImageData" alt="Uploaded Image" style="max-width: 100%; height: auto;" />
}
<MudTable Items="@images" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>id</MudTh>
        <MudTh>ImageName</MudTh>
        <MudTh>ImagePath</MudTh>
        <MudTh>UploadData</MudTh>
        <MudTh>Action</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="ImageName">@context.ImageName</MudTd>
        <MudTd DataLabel="Imagepath">@context.ImagePath</MudTd>
        <MudTd DataLabel="UploadDate">@context.UploadDate</MudTd>
        <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => SureDialog(context.Id))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" /></MudTd>

    </RowTemplate>
</MudTable>




@code {
    private IBrowserFile selectedFile;
    private string uploadedImageName;
    public IEnumerable<ImageModel> images = new List<ImageModel>();
    ImageModel CreateImage = new ImageModel();
    private string uploadedImageData;

    private byte[] tempCoverImage = Array.Empty<byte>();


    private bool _loading;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {

        selectedFile = e.File;
        var GetiamgeName = images.Where(x => x.ImageName == selectedFile.Name).FirstOrDefault();
        if (GetiamgeName != null)
        {
            Snackbar.Add("image Name Allready Exsits ", Severity.Warning);
            return;
        }
        var ContentType = selectedFile.ContentType;
        if (ContentType != "image/png".ToString() && ContentType != "image/jpeg".ToString() && ContentType != "image/jpg".ToString())
        {
            Snackbar.Add($"file type (({ContentType})) not accpetd ", Severity.Warning);
            return;
        }

        if (selectedFile != null)
        {
            uploadedImageName = DateTime.Now.Microsecond.ToString() + "_" + selectedFile.Name;

            // Read the image as a byte
            var fileBytes = new byte[selectedFile.Size];
            using (var stream = selectedFile.OpenReadStream())
            {
                await stream.ReadAsync(fileBytes);
            }
            // Convert to base64
            uploadedImageData = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(fileBytes)}";

        }
       await SaveImage();

    }
    private async Task deleteData(int id)
    {
        Snackbar.Add(id.ToString(), Severity.Success);
        var request = await imageservice.DeleteAsync(id);
        var GetImageById = await imageservice.GetByIdAsync(id);
        if (request.Success)
        {
            //Strat Delete from file

            // var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", GetImageById.Data!.ImageName);
            //  var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\Resources\\Images\\", "uploads", GetImageById.Data!.ImageName);
      
            var filePath = Path.Combine("C:\\Users\\Dell\\Desktop\\MobileStoreV2\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", GetImageById.Data!.ImageName);
            try
            {

                Snackbar.Add(filePath, Severity.Success);
                System.IO.File.Delete(filePath);
                Snackbar.Add("Delete Done From File", Severity.Success);
            }
            catch
            {
                Snackbar.Add("Wrong While Deleteing From File", Severity.Error);

            }
            //end Delete from file

            StateHasChanged();
            Snackbar.Add(request.Message, Severity.Success);
        }
        else Snackbar.Add(request.Message, Severity.Error);
        var requestRefresh = await imageservice.GetAllAsync();
        if (request.Success) images = requestRefresh.Data!;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {

        var request = await imageservice.GetAllAsync();
        if (request.Success)
        {
            images = request.Data!;
        }

    }
    string state = "Message box hasn't been opened yet";

    private async void SureDialog(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are You Sure You Want To Delete This Prodcut !",
            yesText: "Delete!", cancelText: "Cancel");

        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!") await deleteData(id);
        StateHasChanged();
    }
    // ================================== for image ==============================================
    private async Task SaveImage()
    {
        if (selectedFile != null)
        {
            uploadedImageName = DateTime.Now.Microsecond.ToString() + "_" + selectedFile.Name;

            // var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
   
            // var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\Resources\\Images\\", "uploads", uploadedImageName);
            // var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\Resources\\Images\\", "uploads", uploadedImageName);
           var filePath = Path.Combine($"C:\\Users\\Dell\\Desktop\\MobileStoreV2\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
            // var filePath = Path.Combine($"C:\\Users\\Rami\\source\\repos\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);

            var fileBytes = new byte[selectedFile.Size];

            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(fileStream);
            }

            // Save the image using the service
            CreateImage.ImageName = uploadedImageName;
            CreateImage.ImagePath = $"uploads/{Path.GetFileName(uploadedImageName)}";
            CreateImage.DeletedAt = DateTime.Now;
            CreateImage.IsDeleted = false;
            CreateImage.DeletedAt = null;
            var image = CreateImage;
            var request = await imageservice.CreateAsync(image);
            var requestRefresh = await imageservice.GetAllAsync();
            if (request.Success)
            {
                images.Append(image);
                images = requestRefresh.Data!;
                // Snackbar.Add(request.Message, Severity.Success);
                CreateImage = new ImageModel();
                StateHasChanged();
            }
            else Snackbar.Add(request.Message, Severity.Error);
        }
    }
   
}


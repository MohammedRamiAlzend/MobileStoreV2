@page "/Dashboard"

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService

@using MobileStoreV2.Services.Interfaces
@using MobileStoreV2.Models
@inject IProductService ProductService
@using Services.Interfaces

@* @inject IJSRuntime _ijs *@




<h3>Dashboard</h3

<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary" Style="margin:20px 20px 20px 50px ">
    Add Proudct
</MudButton>

    


@* start add product form *@

<MudDialog @bind-IsVisible="showInnerComponent">
    <TitleContent>
        Add Product
    </TitleContent>
    <DialogContent>
<EditForm Model="@createProduct" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudCard>
           
            <MudCardContent>
                <MudTextField Label="Name" HelperText="Max. 8 characters"
                              @bind-Value="createProduct.Name" For="@(() => createProduct.Name)" InputType="InputType.Text"/>
                <MudTextField Label="BarCode" Class="mt-3"
                              @bind-Value="createProduct.BarCode" For="@(() => createProduct.BarCode)" InputType="InputType.Number"/>

                <MudTextField Label="BrandId" HelperText="Repeat the Brand" Class="mt-3"
                              @bind-Value="createProduct.BrandId" For="@(() => createProduct.BrandId)" InputType="InputType.Number"/>

                <MudTextField Label="CategoryId" HelperText="Repeat the Brand" Class="mt-3"
                              @bind-Value="createProduct.CategoryId" For="@(() => createProduct.CategoryId)" InputType="InputType.Number"/>
               <MudTextField Label="Description" HelperText="Repeat the Brand" Class="mt-3"
                              @bind-Value="createProduct.Description" For="@(() => createProduct.Description)" InputType="InputType.Text"/>
               <MudTextField Label="Discount" HelperText="Repeat the Brand" Class="mt-3"
                             @bind-Value="createProduct.Discount" For="@(() => createProduct.Discount)" InputType="InputType.Number"/>
               <MudTextField Label="ImagePath" HelperText="Repeat the Brand" Class="mt-3"
                             @bind-Value="createProduct.ImagePath" For="@(() => createProduct.ImagePath)" InputType="InputType.Text"/>

               <MudTextField Label="Price" HelperText="Repeat the Brand" Class="mt-3"
                             @bind-Value="createProduct.Price" For="@(() => createProduct.Price)" InputType="InputType.Number"/>
               <MudTextField Label="Quantity" HelperText="Repeat the Brand" Class="mt-3"
                             @bind-Value="createProduct.Quantity" For="@(() => createProduct.Quantity)" InputType="InputType.Number"/>
            </MudCardContent>
            <MudCardActions Class="d-xl-inline-flex" Style="display:flex;justify-content:end">
                <MudButton OnClick="Cancel" Variant="Variant.Filled"  Style="margin-right:15px" >Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" >Add</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    @* start Validation Summary *@

    <MudDialog @bind-IsVisible="showInnerComponentDone">
             <TitleContent>
                        <MudText Typo="Typo.h6">
                              <MudIcon Typo="Typo.subtitle2"   Class="mr-3" /> Validation Summary
                        </MudText>
                    </TitleContent>
        <DialogContent>
            <MudItem>
                <MudPaper Class="pa-4 ">
              
                        @if (success)
                        {
                          
                                    <MudAlert Severity="Severity.Success">Add Done Successfully </MudAlert>
                                    createProduct.Name = "";
                                    createProduct.BarCode = 0 ;
                                    createProduct.BrandId =0;
                                    createProduct.CategoryId = 0;
                                    createProduct.Description = "";
                                    createProduct.Discount = 0;
                                    createProduct.ImagePath = "";
                                    createProduct.Price = 0;
                                    createProduct.Quantity = 0;
                        }
                        else
                        {
                            <MudText  Color="@Color.Error">
                                <ValidationSummary />
                            </MudText>
                        }
                   
                </MudPaper>
            </MudItem>
        </DialogContent>
         <DialogActions>
              <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CancelDone" Class="px-10">Close</MudButton>
         </DialogActions>
     </MudDialog>
    @* End Validation Summary *@
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            add product for your collcation 
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>
    </DialogContent>

</MudDialog>
@* End add product form *@
    @if (products == null)
{
    <p><em>Loading...</em></p>
}else{
<MudTable Items="@products" 
    Hover="true" 
    Breakpoint="Breakpoint.Sm" 
    Loading="@_loading" 
    LoadingProgressColor="Color.Info"
    EditTrigger="@TableEditTrigger.EditButton"
    >
         
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Discount</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Price </MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>BarCode</MudTh>
        <MudTh>BrandId</MudTh>
        <MudTh>CategoryId</MudTh>
        <MudTh>ImagePath</MudTh>
        <MudTh>InsertDate</MudTh>
     
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
        <MudTd DataLabel="Sign">@context.Discount</MudTd>
        <MudTd DataLabel="Name">@context.Description</MudTd>
        <MudTd DataLabel="Position" HideSmall="_hidePosition">@context.Quantity</MudTd>
        <MudTd DataLabel="Molar mass">@context.Price</MudTd>
        <MudTd DataLabel="Molar mass">@context.Brand?.Name</MudTd>
        <MudTd DataLabel="Molar mass">@context.Category?.Name</MudTd>
        <MudTd DataLabel="Molar mass">@context.BarCode</MudTd>
        <MudTd DataLabel="Molar mass">@context.BrandId</MudTd>
        <MudTd DataLabel="Molar mass">@context.CategoryId</MudTd>
        <MudTd DataLabel="Molar mass">@context.ImagePath</MudTd>
        <MudTd DataLabel="Molar mass">@context.InsertDate</MudTd>
        
       
        <MudTd><MudIconButton OnClick="@(()=> deleteData(context.Id))" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton></MudTd>
        
    </RowTemplate>
    </MudTable>
 
}

@code {
    private bool _hidePosition;
    private bool _loading;

    public IEnumerable<Product> products = new List<Product>();
    protected override async Task OnInitializedAsync()
    {
        var request = await ProductService.GetAllProductsAsync();
        if(request.Success)
        {
            products = request.Data!;
        }
    }
    private async Task deleteData(int id)
    {


        success = true;
        var product = createProduct;
        var request =  await ProductService.DeleteProductAsync(2);
        if (request.Success)
        {
            products.Append(product);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(request.Message);
        }

    }
    // start code form
    Product createProduct = new Product();
    bool success;


    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        var product = createProduct;
        var request =  await ProductService.CreateProductAsync( product);
        if (request.Success)
        {
            products.Append(product);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(request.Message);
        }
        OpenDialogDone();
    }
       // end code form

        //start modal

    private bool showInnerComponent = false;
    private bool showInnerComponentDone = false;
    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };
    private void OpenDialog() => showInnerComponent = true;
    private void OpenDialogDone() => showInnerComponentDone = true;
    private void Cancel() => showInnerComponent = false;
    private void CancelDone() => showInnerComponentDone = false;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

        //end modal

}

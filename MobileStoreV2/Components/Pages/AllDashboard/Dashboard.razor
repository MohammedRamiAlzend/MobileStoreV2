@page "/Dashboard"

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@inject IGenericService<Product> ProductService
@inject IGenericService<Brand> brandservice
@inject IGenericService<Category> categoryService
@inject IGenericService<ImageModel> imageserivce
@inject ISnackbar Snackbar
@using Microsoft.EntityFrameworkCore;
<style>
    .continer {
        width: 100%;
        padding: 18px 0;
        position: relative;
        display: flex;
        justify-content: end;
        align-items: center;
    }
</style>
<div class="continer">
    <MudButton Variant="Variant.Filled" @onclick="OpenDialog" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Class="mx-2"> إضافة منتجات </MudButton>
    <MudButton Variant="Variant.Filled" @onclick="OpenDialogBrand" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Class="mx-2"> إضافة علامة تجارية </MudButton>
    <MudButton Variant="Variant.Filled" @onclick="OpenDialogCategory" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"> إضافة صنف </MudButton>
</div>
@* start add product form *@

<MudDialog @bind-IsVisible="showInnerComponent">
    <TitleContent> Add Product</TitleContent>
    <DialogContent>
        <Createproduct OnButtonClick="HandleButtonClick" refreshProduct="OnInitializedAsync" />
    </DialogContent>

</MudDialog>


<MudDialog @bind-IsVisible="showInnerComponentBrands">

    <TitleContent>Add Brand</TitleContent>
    <DialogContent>
        <Createbrand refreshProduct="OnInitializedAsync" />

    </DialogContent>
</MudDialog>

<MudDialog @bind-IsVisible="showInnerComponentCategory">
    <TitleContent>Add Category</TitleContent>
    <DialogContent>
        <Cateorey refreshProduct="OnInitializedAsync" />
    </DialogContent>
</MudDialog>



@* End add product form *@
@if (filteredProducts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@filteredProducts"
              Hover="true"
              Editable="true"
              Breakpoint="Breakpoint.Sm"
              Loading="@_loading"
              LoadingProgressColor="Color.Info"
              EditTrigger="@TableEditTrigger.EditButton"
              Striped="true">
        <ToolBarContent>
            <MudTextField T="string" Label="Search" @bind-Value="searchString" TextChanged="FilterProducts" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Brand</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Discount</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Price </MudTh>
            <MudTh>BarCode</MudTh>
            <MudTh>ImageName</MudTh>
            <MudTh>InsertDate</MudTh>
            <MudTh>Edit</MudTh>
            <MudTh>Delete</MudTh>
        </HeaderContent>
        <RowTemplate>

            @if (_readOnly == true)
            {
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Brand">@context.Brand?.Name</MudTd>
                <MudTd DataLabel="Categor">@context.Category?.Name</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Discount">@context.Discount</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Quantity" HideSmall="_hidePosition">@context.Quantity</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd DataLabel="BarCode">@context.BarCode</MudTd>
                <MudTd DataLabel="BarCode">@context.Image?.ImageName</MudTd>
                <MudTd DataLabel="InsertDate">@context.InsertDate</MudTd>
                <MudTd DataLabel="Edit"><MudIconButton Icon="@Icons.Material.Filled.Edit" Class="mx-2" OnClick="@(() => show(context.Id))" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" /></MudTd>
                <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => SureDialog(context.Id))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" /></MudTd>
            }
            else
            {
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd>
                    <MudSelect T="string" Label="brands" @bind-Value="BrandValue" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var filter in brands)
                        {
                            <MudSelectItem Value="filter.Name" />
                        }
                    </MudSelect>

                </MudTd>
                <MudTd>
                    <MudSelect T="string" Label="category" @bind-Value="CategoryValue" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var filter in category)
                        {
                            <MudSelectItem Value="filter.Name" />
                        }

                    </MudSelect>
                </MudTd>
                <MudTd><MudTextField T="string" Label="Name" @bind-Value="context.Name" Required="true" RequiredError="Name is required!" /></MudTd>
                <MudTd><MudTextField T="double" Label="Discount" @bind-Value="context.Discount" Required="true" RequiredError="Discount is required!" /></MudTd>
                <MudTd><MudTextField T="string" Label="Description" @bind-Value="context.Description" Required="true" RequiredError="Description is required!" /></MudTd>
                <MudTd><MudTextField T="int" Label="Quantity" @bind-Value="context.Quantity" Required="true" RequiredError="Quantity is required!" /></MudTd>
                <MudTd><MudTextField T="double" Label="Price" @bind-Value="context.Price" Required="true" RequiredError="Price is required!" /></MudTd>
                <MudTd><MudTextField T="int" Label="BarCode" @bind-Value="context.BarCode" Required="true" RequiredError="BarCode is required!" /></MudTd>
                <MudTd>
                    <MudSelect T="string" Label="ImageValue" @bind-Value="@ImageValue" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var filter in images)
                        {
                            <MudSelectItem Value="filter.ImageName" />
                        }
                    </MudSelect>
                </MudTd>
                <MudTd><MudTextField T="DateTime" Label="InsertDate" @bind-Value="context.InsertDate" Required="true" RequiredError="InsertDate is required!" /></MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="@(() => EditProduct(context))" Class="mx-2" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
                    @if (_Loadding)
                    {
                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small" />
                    }
                </MudTd>
                <MudTd><MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => Close())" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />    </MudTd>
            }
        </RowTemplate>
    </MudTable>

  

}
@code {
    private bool _hidePosition;
    bool _Loadding = false;
    private bool _loading;
    private string searchString = "";
    private bool _readOnly = true;
    private string BrandValue { get; set; }
    private string CategoryValue { get; set; }
    private string ImageValue { get; set; }
    public IEnumerable<Product> products = new List<Product>();
    public IEnumerable<Product> filteredProducts = new List<Product>();
    public IEnumerable<Brand> brands = new List<Brand>();
    public IEnumerable<Category> category = new List<Category>();
    public IEnumerable<ImageModel> images = new List<ImageModel>();
    public async Task show(int id)
    {
        await OnInitializedAsync();
        if (CategoryValue == null || BrandValue == null || ImageValue == null)
        {
            CategoryValue = products.Where(x => x.Id == id).Select(x => x.Category?.Name).FirstOrDefault();
            BrandValue = products.Where(x => x.Id == id).Select(x => x.Brand?.Name).FirstOrDefault();
            ImageValue = products.Where(x => x.Id == id).Select(x => x.Image?.ImageName).FirstOrDefault();
        }

        _readOnly = false;
    }
    public void Close() => _readOnly = true;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    //start modal
    private bool showInnerComponent = false;
    private bool showInnerComponentBrands = false;
    private bool showInnerComponentCategory = false;
    private bool showInnerComponentDone = false;
    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };
    private void OpenDialog() => showInnerComponent = true;
    private void OpenDialogBrand() => showInnerComponentBrands = true;
    private void OpenDialogCategory() => showInnerComponentCategory = true;
    private void OpenDialogDone() => showInnerComponentDone = true;
    private void Cancel() => showInnerComponent = false;
    private void CancelDone() => showInnerComponentDone = false;
    //end modal
    private async Task HandleButtonClick() => showInnerComponent = false;


    protected override async Task OnInitializedAsync()
    {
        var request = await ProductService.GetAllAsync();
        if (request.Success) products = request.Data!;
        filteredProducts = products;
        var requestbrand = await brandservice.GetAllAsync();
        if (requestbrand.Success) brands = requestbrand.Data!;

        var requestGategory = await categoryService.GetAllAsync();
        if (requestGategory.Success) category = requestGategory.Data!;

        var requestImage = await imageserivce.GetAllAsync();
        if (requestImage.Success) images = requestImage.Data!;

    }
    private async Task deleteData(int id)
    {
        success = true;
        var product = createProduct;

        var request = await ProductService.DeleteAsync(id);
        if (request.Success)
        {
            StateHasChanged();
            Snackbar.Add(request.Message, Severity.Success);
        }
        else Snackbar.Add(request.Message, Severity.Error);


        var requestRefresh = await ProductService.GetAllAsync();
        if (request.Success)
        {
            products = requestRefresh.Data!;
        }

        filteredProducts = products;
        StateHasChanged();

    }
    // start code form
    Product createProduct = new Product();
    Brand CreateBrand = new Brand();
    ImageModel createImage = new ImageModel();
    Category createcategory = new Category();
    bool success;

    // end code form


    private void FilterProducts() //Filtering Func
    {
        if (string.IsNullOrWhiteSpace(searchString))filteredProducts = products;
        else filteredProducts = products.Where(p => p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || p.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
    }


    //start Edit Func

    private async Task EditProduct(Product product)
    {
        try
        {
            _Loadding = true;
            var GetCategory = await categoryService.FindSingleEntityByConditionAsync(x => x.Name == CategoryValue);
            if (GetCategory.Success) product.CategoryId = GetCategory.Data!.Id;
            else Snackbar.Add(GetCategory.Message, Severity.Error);
            var GetBrand = await brandservice.FindSingleEntityByConditionAsync(x => x.Name == BrandValue);
            if (GetBrand.Success)product.BrandId = GetBrand.Data!.Id;
            else Snackbar.Add(GetBrand.Message, Severity.Error);
            var GetImage = await imageserivce.FindSingleEntityByConditionAsync(x => x.ImageName == ImageValue);
            if (GetImage.Success) product.ImageId = GetImage.Data!.Id;
            else Snackbar.Add(GetImage.Message, Severity.Error);
            _readOnly = false;
            var response = await ProductService.UpdateAsync(product.Id, product);
            var requestRefresh = await ProductService.GetByIdAsync(product.Id);

            if (response.Success)
            {
                filteredProducts = products;
                Snackbar.Add("Modify Product with Id :" + product.Id + " Done successfully ", Severity.Success);
                _Loadding = false;
                StateHasChanged();
                FilterProducts();
                Close();
            }
            else Snackbar.Add(response.Message, Severity.Error);
        }
        catch
        {
            Snackbar.Add("Fill All", Severity.Error);
        }
    }
    //End Edit Func
    //start Delete Dialog

    string state = "Message box hasn't been opened yet";

    private async void SureDialog(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are You Sure You Want To Delete This Prodcut !",
            yesText: "Delete!", cancelText: "Cancel");

        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!") await deleteData(id);
        StateHasChanged();
    }
    //End Delete Dialog
}

@inject IDialogService DialogService
@inject IGenericService<Product> ProductService
@inject IGenericService<Brand> brandservice
@inject IGenericService<Category> categoryService
@inject IGenericService<ImageModel> imageserivce
@inject ISnackbar Snackbar

<style>
    .continer {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .ImageSize {
        /* padding: 50px; */
        transition: transform .5s; /* Animation */
        width: 250px;
        height: 250px;
        margin: 0 auto;
        position: relative;
        cursor: pointer;
    }

    .buttonCssClass {
        transform: scale(1.5); /* (150% zoom - Note: if the zoom is too large, it will go outside of the viewport) */
    }

</style>

<MudDialog>
    <TitleContent> Add Product</TitleContent>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <EditForm Model="@createProduct" OnValidSubmit="OnValidSubmit">

                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="12">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField T="string" Label="Name" @bind-Value="createProduct.Name" For="@( () => createProduct.Name )" />

                                <MudTd DataLabel="BarCode"><MudNumericField Label="Enter BarCode" @bind-Value="createProduct.BarCode" For="@( () => createProduct.BarCode )" /></MudTd>

                                <MudTd DataLabel="Discount"><MudNumericField Label="Enter Discount" @bind-Value="createProduct.Discount" /></MudTd>

                                <br />
                                <MudTd DataLabel="Buy Price"><MudNumericField Label="Enter Buy Price" @bind-Value="createProduct.BuyPrice" For="@( () => createProduct.BuyPrice )" /></MudTd>
                                <MudTd DataLabel="Sell Price"><MudNumericField Label="Enter Sell Price" @bind-Value="createProduct.SellPrice" For="@( () => createProduct.SellPrice )" /></MudTd>

                                <MudTd DataLabel="Quantity"><MudNumericField Label="Enter Quantity" @bind-Value="createProduct.Quantity" For="@( () => createProduct.Quantity )" /></MudTd>
                                <MudTextField T="string" Label="Description" @bind-Value="createProduct.Description" For="@( () => createProduct.Description )" />
                                <MudSelect T="string" Label="category" @onclick="OnInitializedAsync" @bind-Value="CategoryValue" AnchorOrigin="Origin.BottomCenter">
                                    @foreach (var filter in category)
                                    {
                                        <MudSelectItem Value="filter.Name" />
                                    }
                                </MudSelect>
                                <MudSelect T="string" Label="Brand" @onclick="OnInitializedAsync" @bind-Value="BrandValue" AnchorOrigin="Origin.BottomCenter">
                                    @foreach (var filter in brands)
                                    {
                                        <MudSelectItem Value="filter.Name" />
                                    }
                                </MudSelect>
                                <MudForm>

                                    <MudRadioGroup @bind-Value="SelectedOption">
                                        <MudRadio Value="@("Radio 1")" Color="Color.Primary" Dense="true">Chouse from Exsit Images</MudRadio>
                                        <MudRadio Value="@("Radio 2")" Color="Color.Dark">upload image</MudRadio>
                                    </MudRadioGroup>
                                </MudForm>
                                @if (SelectedOption == "Radio 1")
                                {
                                    <MudSelect T="string" Label="images" @bind-Value="ImageValue" AnchorOrigin="Origin.BottomCenter">
                                        @foreach (var filter in images)
                                        {

                                            @if (filter.ImageName != "0.jpg")
                                            {
                                                <MudSelectItem T="string" Value="filter.ImageName">
                                                    <MudImage Src="@filter.ImagePath" Width="32" />
                                                    @filter.ImageName
                                                </MudSelectItem>
                                            }
                                        }
                                    </MudSelect>
                                }
                                @if (SelectedOption == "Radio 2")
                                {
                                    <InputFile OnChange="HandleFileSelected" accept="image/jpeg,image/png" />
                                    @if (uploadedImageData != null)
                                    {
                                        <div class="continer">
                                            <img src="@uploadedImageData" alt="Uploaded Image" class="ImageSize  @buttonCssClass" />
                                        </div>
                                    }
                                }
                                @if (ImageValue != null && SelectedOption == "Radio 1" && !string.IsNullOrEmpty(GetImage.ImagePath))
                                {

                                    GetImageFunc();
                                    @if (!ImageLoad)
                                    {

                                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                                        <MudCardContent>
                                            <MudSkeleton Width="30%" Height="42px;" />
                                            <MudSkeleton Width="80%" />
                                            <MudSkeleton Width="100%" />
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                                            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                                        </MudCardActions>

                                    }
                                    else
                                    {
                                            <div class="continer">
                                                <img src="@GetImage.ImagePath" class="ImageSize @buttonCssClass" alt="@GetImage.ImagePath" />
                                            </div>
                                    }
                                }

                            </MudCardContent>
                            <MudCardActions Class="d-xl-inline-flex" Style="display:flex;justify-content:end">
                                <MudButton OnClick="Cancel" Variant="Variant.Filled" Style="margin-right:15px">Cancel</MudButton>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                                    Add
                                    @if (_Loadding)
                                    {
                                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small" />
                                    }
                                </MudButton>
                                <MudButton OnClick="OpenDialogCategory" Variant="Variant.Outlined" Class=" mx-4">Add category</MudButton>
                                <MudButton OnClick="OpenDialogBrand" Variant="Variant.Outlined">Add Brand</MudButton>
                            </MudCardActions>

                        </MudCard>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2" Align="Align.Center">
                            add product for your collcation
                        </MudText>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </div>
    </DialogContent>
</MudDialog>

@code {
    bool success;
    bool _Loadding = false;
    Product createProduct = new Product();
    ImageModel GetImage = new ImageModel();
    public IEnumerable<Product> products = new List<Product>();
    public IEnumerable<Product> filteredProducts = new List<Product>();
    public IEnumerable<Brand> brands = new List<Brand>();
    public IEnumerable<Category> category = new List<Category>();
    public IEnumerable<ImageModel> images = new List<ImageModel>();
    [Parameter] public EventCallback<bool> OnButtonClick { get; set; }
    [Parameter] public EventCallback<bool> refreshProduct { get; set; }
    private bool showInnerComponent = false;

    // private Task OpenDialogBrand()
    private Task OpenDialogBrand()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        return DialogService.ShowAsync<Createbrand>("Add Brand", options);
    }
    private Task OpenDialogCategory()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        return DialogService.ShowAsync<Cateorey>("Add Cateorey", options);
    }

    // private void Cancel() => showInnerComponent = false;
    private string BrandValue { get; set; }
    private string CategoryValue { get; set; }
    private string ImageValue { get; set; }
    private bool isClicked = false;
    private string buttonCssClass => isClicked ? "buttonCssClass" : "";
    public string SelectedOption { get; set; } = "Radio 1";
    private bool ImageLoad = false;
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    private void Cancel() => MudDialog.Cancel();



    private void ToggleButtonStyle() => isClicked = !isClicked;
    private List<ImageSource> imageSources;

    protected override async Task OnInitializedAsync()
    {
        var request = await ProductService.GetAllAsync();
        if (request.Success) products = request.Data!;
        filteredProducts = products;
        var requestbrand = await brandservice.GetAllAsync();
        if (requestbrand.Success) brands = requestbrand.Data!;

        var requestGategory = await categoryService.GetAllAsync();
        if (requestGategory.Success) category = requestGategory.Data!;

        var requestImage = await imageserivce.GetAllAsync();
        if (requestImage.Success) images = requestImage.Data!;



    }

    private async Task GetImageFunc()
    {
        if (ImageValue != null)
        {
            try
            {
                var ImageValueBind = images.Where(x => x.ImageName == ImageValue).Select(x => x.ImagePath).FirstOrDefault();
                GetImage.ImagePath = ImageValueBind;
                ImageLoad = true;
            }
            catch
            {
                Snackbar.Add("image not add ", Severity.Error);
            }
        }
    }
    private async void OnValidSubmit(EditContext context)
    {
        try
        {


            if (context.Validate())
            {
                if (string.IsNullOrEmpty(ImageValue))ImageValue = "0.jpg";
                if (ImageValue != null && SelectedOption == "Radio 2" || uploadedImageData != null) await SaveImage();
                success = true;
                _Loadding = true;
                try
                {
                    var GetCategory = await categoryService.FindSingleEntityByConditionAsync(x => x.Name == CategoryValue);
                    var GetBrand = await brandservice.FindSingleEntityByConditionAsync(x => x.Name == BrandValue);
                    var GetImage = await imageserivce.FindSingleEntityByConditionAsync(x => x.ImageName == ImageValue);
                    if (GetCategory.Success) createProduct.CategoryId = GetCategory.Data!.Id;
                    // else Snackbar.Add(GetCategory.Message, Severity.Error);
                    else createProduct.CategoryId = 0;
                    if (GetBrand.Success) createProduct.BrandId = GetBrand.Data!.Id;
                    else Snackbar.Add(GetBrand.Message, Severity.Error);
                    if (GetImage.Success) createProduct.ImageId = GetImage.Data!.Id;
                    else Snackbar.Add(GetBrand.Message, Severity.Error);
                }
                catch
                {
                    Snackbar.Add("problem with getting date", Severity.Error);
                }
                createProduct.InsertDate = DateTime.Now;
                var product = createProduct;
                var request = await ProductService.CreateAsync(product);
                var requestRefresh = await ProductService.GetAllAsync();

                if (request.Success)
                {

                    products.Append(product);


                    products = requestRefresh.Data!;
                    filteredProducts = products;

                    Snackbar.Add("Add Product Done successfully", Severity.Success);
                    await refreshProduct.InvokeAsync(); //refresh Dashboard table
                    createProduct = new Product();
                    ImageValue = "";
                    _Loadding = false;

                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add(request.Message, Severity.Error);
                }
                _Loadding = false;

            }
        }
        catch
        {
            _Loadding = false;
            Snackbar.Add("some Problem Happend", Severity.Error);
        }

    }


    //__________________________img_______________________________
    private IBrowserFile selectedFile;
    private string uploadedImageName;
    ImageModel CreateImage = new ImageModel();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var GetiamgeName = images.Where(x => x.ImageName == selectedFile.Name).FirstOrDefault();
        if (GetiamgeName != null)
        {
            Snackbar.Add("image Name Allready Exsits ", Severity.Warning);
            return;
        }
        var ContentType = selectedFile.ContentType;
        if (ContentType != "image/png".ToString() && ContentType != "image/jpeg".ToString() && ContentType != "image/jpg".ToString())
        {
            Snackbar.Add($"file type (({ContentType})) not accpetd ", Severity.Warning);
            return;
        }

        if (selectedFile != null)
        {
            uploadedImageName = DateTime.Now.Microsecond.ToString() + "_" + selectedFile.Name;

            // Read the image as a byte
            var fileBytes = new byte[selectedFile.Size];
            using (var stream = selectedFile.OpenReadStream())
            {
                await stream.ReadAsync(fileBytes);
            }
            // Convert to base64
            uploadedImageData = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(fileBytes)}";

        }
    }


    private List<IBrowserFile> uploadedFiles = new List<IBrowserFile>();
    private string uploadedImageData;

    private async Task SaveImage()
    {
        if (selectedFile != null)
        {
            uploadedImageName = DateTime.Now.Microsecond.ToString() + "_" + selectedFile.Name;
            // var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
            // var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\Resources\\Images\\", "uploads", uploadedImageName);
            var filePath = Path.Combine($"C:\\Users\\Dell\\Desktop\\MobileStoreV2\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
            //  var filePath = Path.Combine("C:\\Users\\Rami\\source\\repos\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);



            var fileBytes = new byte[selectedFile.Size];

            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(fileStream);
            }

            // Save the image using the service
            CreateImage.ImageName = uploadedImageName;
            CreateImage.ImagePath = $"uploads/{Path.GetFileName(uploadedImageName)}";
            CreateImage.DeletedAt = DateTime.Now;
            CreateImage.IsDeleted = false;
            CreateImage.DeletedAt = null;
            var image = CreateImage;
            var request = await imageserivce.CreateAsync(image);
            var requestRefresh = await imageserivce.GetAllAsync();
            if (request.Success)
            {
                images.Append(image);
                images = requestRefresh.Data!;
                CreateImage = new ImageModel();
                ImageValue = uploadedImageName;
                StateHasChanged();
            }
            else Snackbar.Add(request.Message, Severity.Error);

        }

    }




}

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using DataCore.Models.DataCore.Models
@using DataCore.Services.Interfaces
@using DataCore.Models
@inject IProductService ProductService
@inject IBrandService brandservice
@inject ICategoryService categoryService
@inject IImageService imageserivce
@inject ISnackbar Snackbar
@using System.IO
@inject ApplicationDbContext Context


<style>

    .continer {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .ImageSize {
        /* padding: 50px; */
        transition: transform .5s; /* Animation */
        width: 250px;
        height: 250px;
        margin: 0 auto;
        position: relative;
        cursor: pointer;
    }

    .buttonCssClass {
        transform: scale(1.5); /* (150% zoom - Note: if the zoom is too large, it will go outside of the viewport) */
    }
</style>




<EditForm Model="@createProduct" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField T="string" Label="Name" @bind-Value="createProduct.Name" Required="true" RequiredError=" Name is required!" />
                    <MudTextField Label="BarCode" Class="mt-3"
                                  @bind-Value="createProduct.BarCode" For="@(() => createProduct.BarCode)" InputType="InputType.Number" />
                    <MudSelect T="string" Label="Brand" @bind-Value="BrandValue" Required="true" RequiredError=" Brand is required!" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var filter in brands)
                        {
                            <MudSelectItem Value="filter.Name" />
                        }
                    </MudSelect>

                    <MudSelect T="string" Label="category" @bind-Value="CategoryValue" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var filter in category)
                        {
                            <MudSelectItem Value="filter.Name" />
                        }
                    </MudSelect>
                    <MudTextField Label="Description" Class="mt-3" @bind-Value="createProduct.Description" InputType="InputType.Text" />
                    <MudTextField Label="Discount" HelperText="Repeat the Brand" Class="mt-3" @bind-Value="createProduct.Discount" For="@(() => createProduct.Discount)" InputType="InputType.Number" />
                    <MudTextField T="double" Label="Price" @bind-Value="createProduct.Price" Required="true" HelperText="Repeat the Description" RequiredError=" Price is required!" />
                    <MudTextField T="int" Label="Quantity" @bind-Value="createProduct.Quantity" HelperText="Repeat the Quantity" Required="true" RequiredError=" Quantity is required!" />
                    <MudForm>
                        <MudRadioGroup @bind-Value="SelectedOption">
                            <MudRadio Value="@("Radio 1")" Color="Color.Primary" Dense="true">Chouse from Exsit Images</MudRadio>
                            <MudRadio Value="@("Radio 2")" Color="Color.Dark">upload image</MudRadio>
                        </MudRadioGroup>
                    </MudForm>
                    @if (SelectedOption == "Radio 1")
                    {

                        <MudSelect T="string" Label="images" @bind-Value="ImageValue" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var filter in images)
                            {
                                <MudSelectItem T="string" Value="filter.ImageName">
                                    <MudImage Src="@filter.ImagePath" Width="32" />
                                    @filter.ImageName

                                </MudSelectItem>
                            }
                        </MudSelect>
                    }

                    @if (SelectedOption == "Radio 2")
                    {
                        <Uploadimage OnButtonClick="HandleButtonClick" />
                    }
                    @if (ImageValue != null && SelectedOption == "Radio 2")
                    {

                        @foreach (var filter in images)
                        {
                            if (filter.ImageName == ImageValue)
                            {
                                @if (!ImageLoad)
                                {
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                                    <MudCardContent>
                                        <MudSkeleton Width="30%" Height="42px;" />
                                        <MudSkeleton Width="80%" />
                                        <MudSkeleton Width="100%" />
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                                        <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                                    </MudCardActions>
                                }
                                else
                                {
                                    <div class="continer">
                                        @* <img src="data:image;base64,@Convert.ToBase64String(filter.ImageData)" class="ImageSize @buttonCssClass" onclick="@ToggleButtonStyle" /> *@
                                        <img src="@filter.ImagePath" class="ImageSize  @buttonCssClass" alt="@filter.ImagePath" onclick="@ToggleButtonStyle" />
                                    </div>
                                }
                            }
                        }
                    }
                    else if (ImageValue != null && SelectedOption == "Radio 1")
                    {
                        GetImageFunc();
                        @if (!ImageLoad)
                        {

                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                            <MudCardContent>
                                <MudSkeleton Width="30%" Height="42px;" />
                                <MudSkeleton Width="80%" />
                                <MudSkeleton Width="100%" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                            </MudCardActions>

                        }
                        else
                        {
                            <div class="continer">
                                <img src="@GetImage.ImagePath" class="ImageSize @buttonCssClass" alt="@GetImage.ImagePath" onclick="@ToggleButtonStyle" />
                            </div>
                        }
                    }

                </MudCardContent>
                <MudCardActions Class="d-xl-inline-flex" Style="display:flex;justify-content:end">
                    <MudButton OnClick="Cancel" Variant="Variant.Filled" Style="margin-right:15px">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                </MudCardActions>

            </MudCard>
        </MudItem>
        @* start Validation Summary *@

        <MudDialog @bind-IsVisible="showInnerComponentDone">

            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Typo="Typo.subtitle2" Class="mr-3" /> Validation Summary;
                </MudText>

            </TitleContent>
            <DialogContent>
                <MudItem>
                    <MudPaper Class="pa-4 ">

                        @if (success)
                        {
                            createProduct = new Product();
                            <MudAlert Severity="Severity.Success">Add Done Successfully </MudAlert>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">

                                <ValidationSummary />
                            </MudText>
                        }

                    </MudPaper>
                </MudItem>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CancelDone" Class="px-10">Close</MudButton>
            </DialogActions>

        </MudDialog>
        @* End Validation Summary *@
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                add product for your collcation
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>





@code {
    bool success;
    Product createProduct = new Product();
    ImageModel GetImage = new ImageModel();
    public IEnumerable<Product> products = new List<Product>();
    public IEnumerable<Product> filteredProducts = new List<Product>();
    public IEnumerable<Brand> brands = new List<Brand>();
    public IEnumerable<Category> category = new List<Category>();
    public IEnumerable<ImageModel> images = new List<ImageModel>();
    [Parameter] public EventCallback<bool> OnButtonClick { get; set; }
    [Parameter] public EventCallback<bool> refresh { get; set; }
    private bool showInnerComponent = false;
    private bool showInnerComponentDone = false;
    // private void Cancel() => showInnerComponent = false;
    private string BrandValue { get; set; }
    private string CategoryValue { get; set; }
    private string ImageValue { get; set; }
    private bool isClicked = false;
    private string buttonCssClass => isClicked ? "buttonCssClass" : "";
    public string SelectedOption { get; set; } = "Radio 1";
    private bool ImageLoad = false;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }



     private async Task Cancel() => await OnButtonClick.InvokeAsync();
    
    private void CancelDone() => showInnerComponentDone = false;
    private void OpenDialogDone() => showInnerComponentDone = true;
    private void ToggleButtonStyle() => isClicked = !isClicked;

    protected override async Task OnInitializedAsync()
    {
        var request = await ProductService.GetAllProductsAsync();
        if (request.Success) products = request.Data!;
        filteredProducts = products;
        var requestbrand = await brandservice.GetAllBrandsAsync();
        if (requestbrand.Success) brands = requestbrand.Data!;

        var requestGategory = await categoryService.GetAllCategoryAsync();
        if (requestGategory.Success) category = requestGategory.Data!;

        var requestImage = await imageserivce.GetAllImageAsync();
        if (requestImage.Success) images = requestImage.Data!;
    }

    private async Task GetImageFunc()
    {


        if (ImageValue != null)
        {
            try
            {
                var ImageValueBind = images.Where(x => x.ImageName == ImageValue).Select(x => x.ImagePath).FirstOrDefault();
                GetImage.ImagePath = ImageValueBind;
                ImageLoad = true;
            }
            catch
            {
                Snackbar.Add("image not add ", Severity.Error);
            }
        }


    }

    private async void OnValidSubmit(EditContext context)
    {

        if (createProduct.Name == null || createProduct.BarCode == 0 || CategoryValue == null || BrandValue == null || createProduct.Price == 0 || createProduct.Quantity == 0)
            Snackbar.Add("You Should for fill input", Severity.Warning);
        else
        {
            success = true;

            var GetCategory = await categoryService.GetCategoryByNameAsync(CategoryValue);
            if (GetCategory.Success) createProduct.CategoryId = GetCategory.Data!.Id;
            else Snackbar.Add("change category", Severity.Error);


            var GetBrand = await brandservice.GetBrandByNameAsync(BrandValue);
            if (GetBrand.Success) createProduct.BrandId = GetBrand.Data!.Id;
            else Snackbar.Add("change brand", Severity.Error);


            var GetImage = await imageserivce.GetImageByNameAsync(ImageValue);
            if (GetImage.Success) createProduct.ImageId = GetImage.Data!.Id;
            else Snackbar.Add("change image", Severity.Error);


            createProduct.InsertDate = DateTime.Now;
            var product = createProduct;
            var request = await ProductService.CreateProductAsync(product);
            var requestRefresh = await ProductService.GetAllProductsAsync();

            if (request.Success)
            {

                products.Append(product);
                products = requestRefresh.Data!;
                filteredProducts = products;

                await refresh.InvokeAsync(); //refresh Dashboard table
                Snackbar.Add("Add Product Done successfully", Severity.Success);

                StateHasChanged();
            }
            else
                Snackbar.Add(request.Message, Severity.Error);
            OpenDialogDone();
        }

    }

    private async Task HandleButtonClick(string GetValue)
    {
        ImageValue = GetValue;
        var requestImage = await imageserivce.GetAllImageAsync();
        if (requestImage.Success) images = requestImage.Data!;


        ImageLoad = true;
        await Context.SaveChangesAsync();
        StateHasChanged();



    }

}

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using DataCore.Models.DataCore.Models
@using DataCore.Services.Interfaces
@using DataCore.Models
@inject IProductService ProductService
@inject IBrandService brandservice
@inject ICategoryService categoryService
@inject IImageService imageserivce
@inject ISnackbar Snackbar
@using System.IO
@inject ApplicationDbContext Context


<style>

    .continer {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .ImageSize {
        /* padding: 50px; */
        transition: transform .5s; /* Animation */
        width: 250px;
        height: 250px;
        margin: 0 auto;
        position: relative;
        cursor: pointer;
    }

    .buttonCssClass {
        transform: scale(1.5); /* (150% zoom - Note: if the zoom is too large, it will go outside of the viewport) */
    }
</style>




<EditForm Model="@createProduct" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField T="string" Label="Name" @bind-Value="createProduct.Name" For="@( () => createProduct.Name )" Required="true" RequiredError=" Name is required!" />
                    <MudTextField Label="BarCode" Class="mt-3" @bind-Value="createProduct.BarCode" For="@(() => createProduct.BarCode)" Required="true" RequiredError=" Barcode is required!" InputType="InputType.Number" />
                    <MudSelect T="string" Label="Brand" @bind-Value="BrandValue" Required="true" RequiredError=" Brand is required!" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var filter in brands)
                        {
                            <MudSelectItem Value="filter.Name" />
                        }
                    </MudSelect>

                    <MudSelect T="string" Label="category" @bind-Value="CategoryValue" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var filter in category)
                        {
                            <MudSelectItem Value="filter.Name" />
                        }
                    </MudSelect>
                    <MudTextField T="string" Label="Description" @bind-Value="createProduct.Description" For="@( () => createProduct.Description )" />

                    <MudTextField Label="Discount" HelperText="Repeat the Brand" Class="mt-3" @bind-Value="createProduct.Discount" For="@(() => createProduct.Discount)" InputType="InputType.Number" />
                    <MudTextField T="double" Label="Price" @bind-Value="createProduct.Price" For="@( () => createProduct.Price )" Required="true" RequiredError=" Price is required!" InputType="InputType.Number" />

                    <MudTextField T="int" Label="Quantity" @bind-Value="createProduct.Quantity" InputType="InputType.Number" />
                    <MudForm>
                        <MudRadioGroup @bind-Value="SelectedOption">
                            <MudRadio Value="@("Radio 1")" Color="Color.Primary" Dense="true">Chouse from Exsit Images</MudRadio>
                            <MudRadio Value="@("Radio 2")" Color="Color.Dark">upload image</MudRadio>
                        </MudRadioGroup>
                    </MudForm>
                    @if (SelectedOption == "Radio 1")
                    {
                        <MudSelect T="string" Label="images" @bind-Value="ImageValue" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var filter in images)
                            {
                                <MudSelectItem T="string" Value="filter.ImageName">
                                    <MudImage Src="@filter.ImagePath" Width="32" />
                                    @filter.ImageName
                                </MudSelectItem>
                            }
                        </MudSelect>
                    }

                    @if (SelectedOption == "Radio 2")
                    {
                        <InputFile OnChange="HandleFileSelected" accept="image/jpeg,image/png" />
                    }
                    @if (ImageValue != null && SelectedOption == "Radio 2")
                    {

                        @foreach (var filter in images)
                        {
                            if (filter.ImageName == ImageValue)
                            {
                                @if (!ImageLoad)
                                {
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                                    <MudCardContent>
                                        <MudSkeleton Width="30%" Height="42px;" />
                                        <MudSkeleton Width="80%" />
                                        <MudSkeleton Width="100%" />
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                                        <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                                    </MudCardActions>
                                }
                                else
                                {
                                    <div class="continer">
                                        @* <img src="data:image;base64,@Convert.ToBase64String(filter.ImageData)" class="ImageSize @buttonCssClass" onclick="@ToggleButtonStyle" /> *@
                                        <img src="@filter.ImagePath" class="ImageSize  @buttonCssClass" alt="@filter.ImagePath" onclick="@ToggleButtonStyle" />
                                    </div>
                                }
                            }
                        }
                    }
                    else if (ImageValue != null && SelectedOption == "Radio 1")
                    {
                        GetImageFunc();
                        @if (!ImageLoad)
                        {

                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                            <MudCardContent>
                                <MudSkeleton Width="30%" Height="42px;" />
                                <MudSkeleton Width="80%" />
                                <MudSkeleton Width="100%" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                            </MudCardActions>

                        }
                        else
                        {
                            <div class="continer">
                                <img src="@GetImage.ImagePath" class="ImageSize @buttonCssClass" alt="@GetImage.ImagePath" onclick="@ToggleButtonStyle" />
                            </div>
                        }
                    }

                </MudCardContent>
                <MudCardActions Class="d-xl-inline-flex" Style="display:flex;justify-content:end">
                    <MudButton OnClick="Cancel" Variant="Variant.Filled" Style="margin-right:15px">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add
                        @if (_Loadding)
                        {
                            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small"/>
                        }

                    </MudButton>
                </MudCardActions>

            </MudCard>
        </MudItem>
        @* start Validation Summary *@

        @* End Validation Summary *@
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                add product for your collcation
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>





@code {
    bool success;
    bool _Loadding = false;
    Product createProduct = new Product();
    ImageModel GetImage = new ImageModel();
    public IEnumerable<Product> products = new List<Product>();
    public IEnumerable<Product> filteredProducts = new List<Product>();
    public IEnumerable<Brand> brands = new List<Brand>();
    public IEnumerable<Category> category = new List<Category>();
    public IEnumerable<ImageModel> images = new List<ImageModel>();
    [Parameter] public EventCallback<bool> OnButtonClick { get; set; }
    [Parameter] public EventCallback<bool> refreshProduct { get; set; }
    private bool showInnerComponent = false;

    // private void Cancel() => showInnerComponent = false;
    private string BrandValue { get; set; }
    private string CategoryValue { get; set; }
    private string ImageValue { get; set; }
    private bool isClicked = false;
    private string buttonCssClass => isClicked ? "buttonCssClass" : "";
    public string SelectedOption { get; set; } = "Radio 1";
    private bool ImageLoad = false;
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    private async Task Cancel() => await OnButtonClick.InvokeAsync();
    private void ToggleButtonStyle() => isClicked = !isClicked;

    protected override async Task OnInitializedAsync()
    {
        var request = await ProductService.GetAllProductsAsync();
        if (request.Success) products = request.Data!;
        filteredProducts = products;
        var requestbrand = await brandservice.GetAllBrandsAsync();
        if (requestbrand.Success) brands = requestbrand.Data!;

        var requestGategory = await categoryService.GetAllCategoryAsync();
        if (requestGategory.Success) category = requestGategory.Data!;

        var requestImage = await imageserivce.GetAllImageAsync();
        if (requestImage.Success) images = requestImage.Data!;
    }

    private async Task GetImageFunc()
    {


        if (ImageValue != null)
        {
            try
            {
                var ImageValueBind = images.Where(x => x.ImageName == ImageValue).Select(x => x.ImagePath).FirstOrDefault();
                GetImage.ImagePath = ImageValueBind;
                ImageLoad = true;
            }
            catch
            {
                Snackbar.Add("image not add ", Severity.Error);
            }
        }


    }
    private async void OnValidSubmit(EditContext context)
    {
        try
        {
            if (context.Validate())
            {
                success = true;
                _Loadding = true;
                var GetCategory = await categoryService.GetCategoryByNameAsync(CategoryValue);
                if (GetCategory.Success) createProduct.CategoryId = GetCategory.Data!.Id;
                else Snackbar.Add("change category", Severity.Error);


                var GetBrand = await brandservice.GetBrandByNameAsync(BrandValue);
                if (GetBrand.Success) createProduct.BrandId = GetBrand.Data!.Id;
                else Snackbar.Add("change brand", Severity.Error);


                var GetImage = await imageserivce.GetImageByNameAsync(ImageValue);
                if (GetImage.Success) createProduct.ImageId = GetImage.Data!.Id;
                else Snackbar.Add("change image", Severity.Error);


                createProduct.InsertDate = DateTime.Now;
                var product = createProduct;
                var request = await ProductService.CreateProductAsync(product);
                var requestRefresh = await ProductService.GetAllProductsAsync();

                if (request.Success)
                {

                    products.Append(product);
                    products = requestRefresh.Data!;
                    filteredProducts = products;

                    await refreshProduct.InvokeAsync(); //refresh Dashboard table
                    Snackbar.Add("Add Product Done successfully", Severity.Success);
                    createProduct = new Product();
                    _Loadding = false;
                    StateHasChanged();
                }
                else
                    Snackbar.Add(request.Message, Severity.Error);
            }
        }
        catch
        {
            Snackbar.Add("some Problem Happend", Severity.Error);
        }

    }

    private async Task HandleButtonClick(string GetValue)
    {
        ImageValue = GetValue;
        var requestImage = await imageserivce.GetAllImageAsync();
        if (requestImage.Success) images = requestImage.Data!;


        ImageLoad = true;
        await Context.SaveChangesAsync();
        StateHasChanged();



    }
    //__________________________img_______________________________
    private IBrowserFile selectedFile;
    private string uploadedImageName;
    ImageModel CreateImage = new ImageModel();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {

        selectedFile = e.File;
        var GetiamgeName = images.Where(x => x.ImageName == selectedFile.Name).FirstOrDefault();
        if (GetiamgeName != null)
        {
            Snackbar.Add("image Name Allready Exsits ", Severity.Warning);
            return;
        }
        var ContentType = selectedFile.ContentType;
        if (ContentType != "image/png".ToString() && ContentType != "image/jpeg".ToString() && ContentType != "image/jpg".ToString())
        {
            Snackbar.Add($"file type (({ContentType})) not accpetd ", Severity.Warning);
            return;
        }

        if (selectedFile != null)
        {
            uploadedImageName = DateTime.Now.Microsecond.ToString() + "_" + selectedFile.Name;

            //  var filePath = Path.Combine("D:\\prjct\\gitm\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
            var filePath = Path.Combine("C:\\Users\\Dell\\Desktop\\MobileStore\\MobileStoreV2\\MobileStoreV2\\wwwroot\\", "uploads", uploadedImageName);
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(fileStream);
            }

            var fileBytes = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream().ReadAsync(fileBytes);
            // Save the image using the service
            CreateImage.ImageName = uploadedImageName;
            CreateImage.ImagePath = $"uploads/{Path.GetFileName(uploadedImageName)}";
            CreateImage.DeletedAt = DateTime.Now;
            CreateImage.IsDeleted = false;
            CreateImage.DeletedAt = null;
            var image = CreateImage;
            var request = await imageserivce.CreateImageAsync(image);
            var requestRefresh = await imageserivce.GetAllImageAsync();
            if (request.Success)
            {
                images.Append(image);
                images = requestRefresh.Data!;
                Snackbar.Add(request.Message, Severity.Success);
                CreateImage = new ImageModel();

                StateHasChanged();
            }
            else Snackbar.Add(request.Message, Severity.Error);
        }
    }
}

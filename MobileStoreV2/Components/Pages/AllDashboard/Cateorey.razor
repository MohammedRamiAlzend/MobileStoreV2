@page "/Category"

@inject IDialogService DialogService
@inject IGenericService<Category> categoryService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <EditForm Model="@CreateCategory" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="12">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField T="string" Label="Category Name" @bind-Value="CreateCategory.Name" For="@(() => CreateCategory.Name)" Required="true" RequiredError="User name is required!" />
                            </MudCardContent>
                            <MudCardActions Class="d-xl-inline-flex" Style="display:flex;justify-content:end">
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="mx-2" Color="Color.Primary">Add</MudButton>
                                <MudButton OnClick="Cancel" Variant="Variant.Filled" Style="margin-right:15px">Close</MudButton>

                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>

            <MudTable Items="@category" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Delete</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nr">@context.Name</MudTd>
                    <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => SureDialog(context.Id))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" /></MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] {5, 10, 25, 50, 100, int.MaxValue }"
                                   RowsPerPageString="@rowsPerPageString"
                                   InfoFormat="@infoFormat"
                                   AllItemsText="@allItemsText"
                                   HorizontalAlignment="@horizontalAlignment"
                                   HideRowsPerPage="@hideRowsPerPage"
                                   HidePageNumber="@hidePageNumber"
                                   HidePagination="@hidePagination" />
                </PagerContent>
            </MudTable>
        </div>
    </DialogContent>
</MudDialog>

@code {
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    Category CreateCategory = new Category();
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    private void Cancel() => MudDialog.Cancel();
        
    [Parameter] public EventCallback<bool> refreshProduct { get; set; }


    private bool _readOnly = true;

    public IEnumerable<Category> category = new List<Category>();
    private bool _hidePosition;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        var requestbrand = await categoryService.GetAllAsync();
        if (requestbrand.Success) category = requestbrand.Data!;
    }
    private async void OnValidSubmit(EditContext context)
    {
        if (CreateCategory.Name == null)
        {
            Snackbar.Add("Name failed is required", Severity.Error);
            return;
        }

        var brand = CreateCategory;
        var request = await categoryService.CreateAsync(brand);
        var requestRefresh = await categoryService.GetAllAsync();

        if (request.Success)
        {

            category.Append(brand);
            category = requestRefresh.Data!;
            Snackbar.Add("Add Category Done Successfully", Severity.Success);
            await refreshProduct.InvokeAsync(); //refresh Dashboard table

            CreateCategory = new Category();
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(request.Message, Severity.Error);

        }


    }
    private async Task deleteData(int id)
    {

        var product = CreateCategory;

        var request = await categoryService.DeleteAsync(id);
        if (request.Success)
        {

            StateHasChanged();
            Snackbar.Add("Remove Done", Severity.Success);

        }
        else
        {
            Snackbar.Add(request.Message, Severity.Error);

        }

        var requestRefresh = await categoryService.GetAllAsync();
        if (request.Success)
        {
            category = requestRefresh.Data!;
        }

        StateHasChanged();

    }
    //start Delete Dialog

    string state = "Message box hasn't been opened yet";

    private async Task SureDialog(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are You Sure You Want To Delete This Category !",
            yesText: "Delete!", cancelText: "Cancel" );
            
        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!") await deleteData(id);
        StateHasChanged();
  
    }
    
    
    //End Delete Dialog
}

@page "/categor"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using DataCore.Services.Interfaces
@using DataCore.Models
@inject ICategoryService categoryService
@inject ISnackbar Snackbar

<h3>Cateorey</h3>

<EditForm Model="@CreateCategory" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    @* <MudTextField Label="Name" HelperText="Max. 8 characters"@bind-Value="CreateCategory.Name" For="@(() => CreateCategory.Name)" InputType="InputType.Text" /> *@
                    <MudTextField T="string" Label="Username"  @bind-Value="CreateCategory.Name" For="@(() => CreateCategory.Name)" Required="true" RequiredError="User name is required!" />
                </MudCardContent>
                <MudCardActions Class="d-xl-inline-flex" Style="display:flex;justify-content:end">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>





<MudTable Items="@category" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
        <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => deleteData(context.Id))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" /></MudTd>
    </RowTemplate>
</MudTable>

@code {

    Category CreateCategory = new Category();

    private bool _readOnly = true;

    public IEnumerable<Category> category = new List<Category>();
    private bool _hidePosition;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        var requestbrand = await categoryService.GetAllCategoryAsync();
        if (requestbrand.Success) category = requestbrand.Data!;
    }
    private async void OnValidSubmit(EditContext context)
    {
        if(CreateCategory.Name== null ){
            Snackbar.Add("Name failed is required", Severity.Error);
            return;
        }

        var brand = CreateCategory;
        var request = await categoryService.CreateCategoryAsync(brand);
        var requestRefresh = await categoryService.GetAllCategoryAsync();

        if (request.Success)
        {

            category.Append(brand);
            category = requestRefresh.Data!;
            Snackbar.Add("Add Category Done Successfully", Severity.Success);
            CreateCategory = new Category();
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(request.Message, Severity.Error);

        }


    }
    private async Task deleteData(int id)
    {

        var product = CreateCategory;

        var request = await categoryService.DeleteCategoryAsync(id);
        if (request.Success)
        {

            StateHasChanged();
            Snackbar.Add("Remove Done", Severity.Success);

        }
        else
        {
            Snackbar.Add(request.Message, Severity.Error);

        }

        var requestRefresh = await categoryService.GetAllCategoryAsync();
        if (request.Success)
        {
            category = requestRefresh.Data!;
        }

        StateHasChanged();

    }
}

@page "/Buyproduct"
@using MobileStoreV2.Models
@using MudBlazor
@using MobileStoreV2.Services.Interfaces
@inject IProductService ProductService


@inherits LayoutComponentBase
@using MobileStoreV2.Components.Pages.ProductsCmpnt
@using MobileStoreV2.Components.Pages
@inject IDialogService DialogService

<style>
    .continer {
        width: 100%;
        position: relative;
        display: flex;
        justify-content: end;
        align-items: center;
    }
</style>

    <MudContainer Class="my-4 continer">
        <MudButton Variant="Variant.Filled" @onclick="OpenDialogAsync" Color="Color.Info" StartIcon="@Icons.Material.Filled.Add">إضافة منتج للبيع</MudButton>
    </MudContainer>

<MudContainer>
    <MudTable Items="products" Striped="true" Hover="true">
        <ToolBarContent>
            <MudTextField T="string" Label="Search" @bind-Value="searchString" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Product Name</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Product Name">context.Name</MudTd>
            <MudTd DataLabel="Price">context.Price</MudTd>
            <MudTd DataLabel="Category">context.Category</MudTd>
            <MudTd DataLabel="Actions">
                @* <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => EditProduct(context.Id))">Edit</MudButton> *@
                <MudButton Variant="Variant.Filled" Color="Color.Primary" >Edit</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Error"
                >Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudContainer Class="my-4 continer">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary"  Size="Size.Small">حفظ الفاتورة</MudButton>
    </MudContainer>
</MudContainer>

@code {

    //start product list 
    public IEnumerable<Product> ProductsList = new List<Product>();
    
    //End product list 
    // private List  products;
    private List<string> products;

      protected override void OnInitialized()
    {
        products = new List<string>
        {
            "Product 1",
            "Product 2",
            "Product 3",
            "Product 4",
            "Product 5"
        };
    }

   
    private string searchString = "";


    protected override async Task OnInitializedAsync()
    {
        // var request = await ProductService.GetAllProductsAsync();
        // if (request.Success)
        // {
        //     ProductsList = request.Data!;
        // } 
    }
    private void EditProduct(int id)
    {
        // Navigate to edit product page
        // NavigationManager.NavigateTo($"/Component1/edit/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        // var response = await Http.DeleteAsync($"api/Component1/{id}");
        // if (response.IsSuccessStatusCode)
        // {
        //     products = await Http.GetFromJsonAsync<List<Product>>("api/Component1");
        // }
        // else
        // {
        //     // Handle error
        // }
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<Buydialog>("Buy Dialog", options);
    }


}

@page "/Buyproduct"

@inject IDialogService DialogService
@inject IGenericService<Product> ProductService
@inject IGenericService<Brand> brandservice
@inject IGenericService<Category> categoryService
@inject IGenericService<ImageModel> imageserivce
@inject ISnackbar Snackbar


<MudPaper Elevation="4" Class="pa-4">
    <MudText Typo="Typo.h4">Create Bill</MudText>



    <MudTable Items="filteredProducts" Dense="true" Hover="true">
        <ToolBarContent>
            <MudTextField T="string" Label="Search" @bind-Value="searchString" TextChanged="FilterProducts" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Select</MudTh>
            <MudTh>Product Name</MudTh>
            <MudTh>Price</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => AddToBill(context))">
                    Add
                </MudButton>
            </MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Price.ToString("C")</MudTd>
        </RowTemplate>
    </MudTable>

    <MudText Typo="Typo.h6" Class="mt-4">Bill</MudText>

    <MudTable Items="billItems" Dense="true" Hover="true">
        <HeaderContent>
            <MudTh>Product Name</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Total</MudTh>
            <MudTh>Remove</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Product.Name</MudTd>
            <MudTd>@context.Product.Price.ToString("C")</MudTd>
            <MudTd>
                <MudNumericField @bind-Value="context.Quantity" Min="1" />
            </MudTd>
            <MudTd>@((context.Product.Price * context.Quantity).ToString("C"))</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => RemoveFromBill(context))">
                    Remove
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveBill" Class="mt-4">
        Save Bill
    </MudButton>
</MudPaper>



@code {
    private bool _hidePosition;
    bool _Loadding = false;
    private bool _loading;
    private string searchString = "";
    private bool _readOnly = true;
    private string BrandValue { get; set; }
    private string CategoryValue { get; set; }
    private string ImageValue { get; set; }
    public IEnumerable<Product> products = new List<Product>();
    public IEnumerable<Product> filteredProducts = new List<Product>();
    public IEnumerable<Brand> brands = new List<Brand>();
    public IEnumerable<Category> category = new List<Category>();
    public IEnumerable<ImageModel> images = new List<ImageModel>();


    Product newProduct = new Product();
    private List<Product> productsAdd = new List<Product>();


    protected override async Task OnInitializedAsync()
    {
        var request = await ProductService.GetAllAsync();
        if (request.Success) products = request.Data!;
        filteredProducts = products;
    }
    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products.Where(p => p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || p.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();

        }
    }
    private void Submit(EditContext context)
    {
        productsAdd.Add(newProduct);

        // Reset the form after adding the product
        newProduct = new Product();

        // Optionally, notify the user that the product was added
        Console.WriteLine("Product added successfully");
    }
    private List<BillItem> billItems = new List<BillItem>();

    private void AddToBill(Product product)
    {
        var existingItem = billItems.FirstOrDefault(item => item.Product.Name == product.Name);
        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            billItems.Add(new BillItem { Product = product, Quantity = 1 });
        }
    }
    public class BillItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
    }
    private void SaveBill()
    {
        Snackbar.Add("Done Save", Severity.Success);
    }
    private void RemoveFromBill(BillItem item)
    {
        billItems.Remove(item);
    }
}
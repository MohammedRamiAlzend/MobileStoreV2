@page "/"


@* <Products/> *@



<MudPaper Height="100%" Width="100%">
    <MudContainer Fixed="true">
        <MudPaper Height="100%" Width="100%" Square="true">
            <MudField Variant="Variant.Filled">التاريخ اليوم : <MudIcon Icon="@Icons.Material.Filled.DateRange" Color="@Color.Warning" /> @datenow</MudField>
        </MudPaper>
    </MudContainer>
</MudPaper>
    <MudSpacer />
    <br />
    <br />

<MudPaper Height="100%" Width="50%">
    <MudContainer Fixed="true">
        <MudPaper Height="100%" Width="100%" Square="true">
            <EditForm Model="unitslist" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudCard>
                            <MudCardContent>
                                <MudForm>
                                    <MudRadioGroup @bind-Value="unitslist.Company">
                                        <MudRadio Value="@("MTN")" Color="Color.Primary" >MTN</MudRadio>
                                        <MudRadio Value="@("Syriatel")" Color="Color.Info">Syriatel</MudRadio>
                                    </MudRadioGroup>
                                </MudForm>
                                <MudTextField Label="الرقم" HelperText="اعلى عدد ارقام 10" Mask="@(new PatternMask("000 000 0000"))"
                                              @bind-Value="unitslist.Nummber" For="@(() => unitslist.Nummber)" />
                                <MudForm>
                                    <MudRadioGroup @bind-Value="unitslist.PayType">
                                        <MudRadio Value="true" Color="Color.Primary" Dense="true">مسبق الدفع</MudRadio>
                                        <MudRadio Value="false" Color="Color.Info" Dense="false">لاحق الدفع</MudRadio>
                                    </MudRadioGroup>
                                </MudForm>

                                <MudTextField Label="السعر"
                                              @bind-Value="unitslist.price" For="@(() => unitslist.price)" />
                            </MudCardContent>

                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"  Color="Color.Primary" Class="ml-auto">save</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudPaper>
        <MudPaper Height="100%" Width="100%" Square="true">
            <MudTable Items="filteredProducts" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Nr</MudTh>
                    <MudTh>Sign</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Position</MudTh>
                    <MudTh>Molar mass</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nr">context.Number</MudTd>
                    <MudTd DataLabel="Sign">context.Sign</MudTd>
                    <MudTd DataLabel="Name">context.Name</MudTd>
                    <MudTd DataLabel="Position" >context.Position</MudTd>
                    <MudTd DataLabel="Molar mass">context.Molar</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudContainer>
</MudPaper>

@code {
   public DateTime datenow { get; set; } = DateTime.Now;
    public IEnumerable<Units> filteredProducts = new List<Units>();

    Units unitslist = new Units();

    // string datenow;
    Timer aTimer;

    protected override void OnInitialized()
    {
        aTimer = new Timer(Tick, null, 0, 1000);
    }

    private void Tick(object _)
    {
        datenow = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        aTimer?.Dispose();
    }
    private async void OnValidSubmit()
    {
        
    }
    public class Units
    {
        // Primary key
        public int Id { get; set; }

        // nummber of user
        [Required]
        [StringLength(12, ErrorMessage = "يجب ان يكون 10 ارقام." , MinimumLength =12)]
        public string? Nummber { get; set; }

        // Syriatel and MTN
        [Required]
        [StringLength(30, ErrorMessage = "اسم المنتج مطلوب")]
        public string? Company { get; set; }

        //Prepayment or Postpaid
        [Required]
        [Range(0, 1, ErrorMessage = "يجب أن يكون أكبر من 0")]
        public bool PayType { get; set; }
        //Price Of Payes
        [Required]
        [Range(1, double.MaxValue, ErrorMessage = "يجب أن يكون أكبر من ")]
        public double price { get; set; }

    }
}
